@inject _05_DragAndDropService DragService

<div class="dragable-area band"
    @onpointerdown=OnPointerDown
    @onpointerup=OnPointerUp
    @onpointermove=OnPointerMove
    @ondrop="e=>OnDrop(e)"
    ondragover="event.preventDefault()">
    <CascadingValue Value="this">
        @foreach (_05_BaseControlModel control in Controls)
        {
            <_05_BaseControl BaseControlModel="control"></_05_BaseControl>
        }
    </CascadingValue>

    <_05_CreateArea Model="createModel" />
</div>

<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@text1</RadzenText>
<br />
<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@text2</RadzenText>
<br />
<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@text3</RadzenText>

@code {

    public List<_05_BaseControlModel> Controls { get; set; } = new List<_05_BaseControlModel>();
    _05_CreateControlModel createModel = new _05_CreateControlModel();

    string text1 = string.Empty;
    string text2 = string.Empty;
    string text3 = string.Empty;

    public enum ActionState
    {
        Create,
        Resize,
        None
    }
    public ActionState State { get; set; } = ActionState.None;
    void OnPointerUp(PointerEventArgs e)
    {
        var control = Controls.Find(x => x.Selected == true);
        if (State == ActionState.Create)
        {
            //드래그는 우측 하단으로만 진행하도록 한다.
            if (e.ClientX > createModel.ClientX && e.ClientY > createModel.ClientY)
                CreateControl(e);
            createModel.ActionEnd( );
        }
        else if (State == ActionState.Resize)
        {

            if (control != null )
            {
                control.ApplyResize();
            }
        }
        else
        {

        }
        if(control is not null)
        {
            SortControls();
            //control.IsDragAble = false;
        }

        State = ActionState.None;
        Console.WriteLine("Band - OnPointerUp");
    }
    void OnPointerMove(PointerEventArgs e)
    {
        if (State == ActionState.Create)
        {
            createModel.ActionMove(e);
        }
        else if(State == ActionState.Resize)
        {
            var control = Controls.Find(x => x.Selected == true);
            if (control != null)
            {
                control.ResizeModel.ActionMove(e);
                StateHasChanged();
            }
        }
    }
    void OnPointerDown(PointerEventArgs e)
    {
        //자식 컴포넌트가 선택되지 않았다면 선택된 모든 컴포넌트를 해제해준다.
        ClearControlSelect();

        //2. 생성 모드일 경우(임시로 항상 생성모드로 한다.)
        State = ActionState.Create;
        createModel.ActionStart(e);
        text1 = $"Start Point : {(int)e.OffsetX} {(int)e.OffsetY}";
        text2 = text3 = "";

    }
    void OnDrop(DragEventArgs e)
    {

        int mouseMoveDictanceX = (int)e.ClientX - DragService.PosX;
        int mouseMoveDictanceY = (int)e.ClientY - DragService.PosY;

        _05_BaseControlModel? workModel = Controls.Find(x => x.Uid == DragService.Uid);
        Console.WriteLine("Band - OnDrop" + DragService.Uid);

        if (workModel is not null)
        {
            workModel.X = workModel.X + mouseMoveDictanceX;
            workModel.Y = workModel.Y + mouseMoveDictanceY;
        }
    }
    bool CreateControl(PointerEventArgs e) //int x, int y, int width, int height)
    {
        int x = createModel.X;
        int y = createModel.Y;
        int width = createModel.Width;
        int height = createModel.Height;

        //최소 사이즈 이상 드래그 된 경우만 진행한다. ?? 아니면 작게 그리면 최소사이즈만큼 그려준다?
        int controlMinimumSize = 10;
        if (width < controlMinimumSize || height < controlMinimumSize)
            return false;

        //새로 생성하는 컨트롤에 TabIndex를 할상해서 키보드 이벤트를 받도록 한다. 
        int tabIndex = 0;
        if(Controls.Count > 0)
            tabIndex = Controls.Max(x => x.TabIndex) + 1;

        _05_BaseControlModel control = new _05_BaseControlModel()
            {
                Uid = Guid.NewGuid().ToString(),
                X = x,
                Y = y,
                Width = width,
                Height = height,
                TabIndex = tabIndex
            };

        //컴포넌트 목록에 추가한다.
        this.Controls.Add(control);

        return true;
    }
    public void ClearControlSelect()
    {
        Controls.ForEach(x => x.Selected = false);
    }

    public void SortControls()
    {
        Controls = Controls.OrderBy(x => x.Selected ? 1 : 0).ToList();

        IsSelectedChildControl();

        bool IsSelectedChildControl()
        {
            foreach (_05_BaseControlModel control in Controls)
            {
                if (control.Selected)
                {
                    text1 = $"UID      : {control.Uid} {Environment.NewLine}";
                    text2 = $"Position : {(int)control.X} {(int)control.Y} {(int)control.Right} {(int)control.Bottom}{Environment.NewLine}";
                    text3 = $"Size     : {(int)control.Width} {(int)control.Height} {Environment.NewLine}";
                    return true;
                }
            }
            return false;
        }
    }
}
