@inject _03_DragAndDropService DragService
<div class="dragable-area"
     @onpointerdown=OnMouseDown
     @onpointerup=OnMouseUp
     @onpointermove=OnMouseMove
     onmouseleave="event.stopPropagation()"
>

    <div class="band" ondragover="event.preventDefault()" @ondrop="e=>OnDrop(e)"
         style=@("position:absolute;")>

        <CascadingValue Value="this">
        @foreach (_03_ComponentModel component in Components)
        {
            <_03_Component  ComponentModel="component"></_03_Component>
        }
        </CascadingValue>

    </div>
</div>

<_03_DragArea DragAreaModel="DragAreaModel" />

@code {
    const int dragaAreaMinSize = 10;

    _03_DragAreaModel DragAreaModel = new _03_DragAreaModel();

    /// <summary>
    /// 여러개의 컴포넌트가 추가될 수 있기 때문에 리스트 형태로 작성
    /// </summary>
    [Parameter]
    public List<_03_ComponentModel> Components { get; set; } = new List<_03_ComponentModel>();

    public bool IsComponentMouseDown = false;


    void OnMouseDown(PointerEventArgs e)
    {
        //Child 컴포넌트가 선택되었는지 체크
        if (IsComponentMouseDown)
            return;

        //Band 영역이 선택되었다면 드래그 시작
        DragAreaModel.DragStart(e.ClientX, e.ClientY);
    }

    void OnMouseUp(PointerEventArgs e)
    {
        if (IsComponentMouseDown)
        {
            IsComponentMouseDown = false;
            return;
        }
        
        //드래그는 우측 하단으로만 진행하도록 한다.
        if (e.ClientX > DragAreaModel.X && e.ClientY > DragAreaModel.Y)
            CreateComponent(e.OffsetX -DragAreaModel.Width, e.OffsetY - DragAreaModel.Height, DragAreaModel.Width, DragAreaModel.Height);

        DragAreaModel.DragEnd();
    }
    void OnMouseMove(PointerEventArgs e)
    {        
        DragAreaModel.DragMove(e.ClientX, e.ClientY);
    }

    void OnDrop(DragEventArgs e)
    {
        int mouseMoveDictanceX = (int)e.ClientX - DragService.PosX;
        int mouseMoveDictanceY = (int)e.ClientY - DragService.PosY;

        _03_ComponentModel? workModel = Components.Find(x => x.Uid == DragService.Uid);

        if (workModel is not null)
        {
            workModel.X = workModel.X + mouseMoveDictanceX;
            workModel.Y = workModel.Y + mouseMoveDictanceY;

            workModel.Focused = true;
        }
        IsComponentMouseDown = false;
    }

    bool CreateComponent(double x, double y, double width, double height)
    {
        //컴포넌트에 포커스를 지워준다.
        ClearComponentFocus();

        //최소 사이즈 이상 드래그 된 경우만 진행한다. 
        if (width < dragaAreaMinSize || height < dragaAreaMinSize)
            return false;        

        _03_ComponentModel component = new _03_ComponentModel()
        {
            Uid = Guid.NewGuid().ToString(),
            X = x,
            Y = y,
            Width = width,
            Height = height,
            Focused = true
        };

        //컴포넌트 목록에 추가한다. 
        this.Components.Add(component);

        return true;
    }

    public void ClearComponentFocus()
    {
        Components.ForEach(x => x.Focused = false);       
    }
}
