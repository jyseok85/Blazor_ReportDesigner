@using System.Numerics;
@inject _07_DragAndDropService DragService

<div class="dragable-area band"
     tabindex="0"
     @onpointerdown=OnPointerDown
     @onpointerup=OnPointerUp
     @onpointermove=OnPointerMove
     @onkeydown=OnKeyDown
     @onkeyup=OnKeyUp
     ondragover="event.preventDefault()">
    <_07_SnapLine Model="SnapLineModel"></_07_SnapLine>

    <CascadingValue Value="this">
        @foreach (_07_BaseControlModel control in Controls)
        {
            <_07_BaseControl BaseControlModel="control"></_07_BaseControl>
        }
    </CascadingValue> 

    <_07_DragObject DragService="DragService"></_07_DragObject>
</div>

@code {
    public List<_07_BaseControlModel> Controls { get; set; } = new List<_07_BaseControlModel>();


    List<int> snapX = new List<int>();
    List<int> snapY = new List<int>();

    public _07_SnapLineModel SnapLineModel { get; set; } = new _07_SnapLineModel();

    private _07_BaseControlModel? CurrentSelectedModel
    {
        get { return _07_Manager.Instance.CurrentSelectedModel; }
        set { _07_Manager.Instance.CurrentSelectedModel = value; }
    }


    public void SetCurrentControl(string uid)
    {
        CurrentSelectedModel = Controls.Find(x => x.Uid == uid);

        if (CurrentSelectedModel is not null)
        {
            DragService.Hidden = false;
            DragService.X = CurrentSelectedModel.X;
            DragService.Y = CurrentSelectedModel.Y;
            DragService.Width = CurrentSelectedModel.Width;
            DragService.Height = CurrentSelectedModel.Height;
        }
    }
    protected override void OnInitialized()
    {
        _07_BaseControlModel control = new _07_BaseControlModel()
            {
                TabIndex = 0,
                Uid = Guid.NewGuid().ToString(),
                X = 10,
                Y = 20,
                Width = 200,
                Height = 50
            };

        //컴포넌트 목록에 추가한다.
        this.Controls.Add(control);

        UpdateSnapControl();

        _07_Manager.Instance.ClearHistory();
    }   

    void OnPointerDown(PointerEventArgs e)
    {
        //마우스의 Client의 절대좌표에서 컨트롤안에서의 마우스상대좌표를 빼면 현재 컨트롤의 Client좌표를 얻을 수 있다.
        if (CurrentSelectedModel is not null && CurrentSelectedModel.DragAble)
        {
            OnActionStart();
            DragService.StartDrag(CurrentSelectedModel.X, CurrentSelectedModel.Y, e.ClientX, e.ClientY);
        }

    }
    void OnPointerMove(PointerEventArgs e)
    {
        if (CurrentSelectedModel is not null && CurrentSelectedModel.DragAble)
        {
            _07_Manager.Instance.CurrentAction = ActionType.Move;
            DragService.Move(e.ClientX, e.ClientY);

            DoSnap();
        }
    }
    void OnPointerUp(PointerEventArgs e)
    {

        if (CurrentSelectedModel is not null)
        {
            if (CurrentSelectedModel.DragAble)
            {
                CurrentSelectedModel.X = (int)DragService.X;
                CurrentSelectedModel.Y = (int)DragService.Y;
                DragService.Hidden = true;

            }
            CurrentSelectedModel.DragAble = false;
            SnapLineModel.HideSnapLine();
            OnActionEnd();
        }
    }
    /// <summary>
    /// 현재 밴드에 포함된 모든 컨트롤의 스냅 위치를 계산한다.
    /// 1. 컨트롤 생성, 삭제
    /// 2. 컨트롤 이동
    /// 3. 컨트롤 사이즈 변경
    /// </summary>
    public void UpdateSnapControl()
    {
        snapX.Clear();
        snapY.Clear();

        snapX.Add(0);
        snapY.Add(0);

        //리포트 사이즈를 넣는다 x,y는 0일테니 의미없고,

        //밴드 사이즈를 넣는다. 

        //리포트 사이즈를 넣는다.

        foreach (_07_BaseControlModel control in Controls)
        {
            //if (control.Equals(CurrentSelectedModel))
            //    continue;

            int x = (int)control.X;
            int y = (int)control.Y;
            int right = (int)control.Right;
            int bottom = (int)control.Bottom;
            if (snapX.Contains(x) == false)
                snapX.Add(x);
            if (snapY.Contains(bottom) == false)
                snapY.Add(bottom);
            if (snapY.Contains(y) == false)
                snapY.Add(y);
            if (snapX.Contains(right) == false)
                snapX.Add(right);
        }
        string strx = String.Join(", ", snapX.ToArray());
        string stry = String.Join(", ", snapY.ToArray());
        //Console.WriteLine($"UpdateSnapControl x:[{strx}] y:[{stry}]");
    }



    private void DoSnap()
    {
        Dictionary<string, int> dragObjectSnapPoint = new Dictionary<string, int>();
        dragObjectSnapPoint.Add("left", (int)DragService.X);
        dragObjectSnapPoint.Add("top", (int)DragService.Y);
        dragObjectSnapPoint.Add("right", (int)DragService.Right);
        dragObjectSnapPoint.Add("bottom", (int)DragService.Bottom);

        foreach (KeyValuePair<string, int> point in dragObjectSnapPoint)
        {
            int findValue = point.Value;
            int value = 0;

            if (point.Key.Equals("left") || point.Key.Equals("right"))
                value = snapX.OrderBy(x => Math.Abs(findValue - x)).First();
            else
                value = snapY.OrderBy(x => Math.Abs(findValue - x)).First();

            if (Math.Abs(findValue - value) < 10)
            {
                SnapLineModel.ShowSnapLine(point.Key, true, value);
                if (Math.Abs(findValue - value) < 5)
                {
                    SetSnap(point.Key, value);
                }
            }
            else
            {
                SnapLineModel.ShowSnapLine(point.Key, false, value);
            }
        }

        void SetSnap(string direction, int value)
        {
            switch (direction)
            {
                case "left":
                    DragService.X = value;
                    break;
                case "top":
                    DragService.Y = value;
                    break;
                case "right":
                    DragService.X = value - (int)DragService.Width;
                    break;
                case "bottom":
                    DragService.Y = value - (int)DragService.Height;
                    break;
            }
        }
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (CurrentSelectedModel is not null)
        {
            //컨트롤 키와 같이 누른경우
            if (e.CtrlKey)
            {
                //Console.WriteLine($"UpdateSnapControl X: {String.Join(", ", snapX.ToArray())}, Y: {String.Join(", ", snapX.ToArray())}");
                _07_Manager.Instance.CurrentAction = ActionType.Move;
                List<int> movement = new List<int>();
                switch (e.Key)
                {
                    case "ArrowRight":
                        OnActionStart();
                        {
                            //todo
                            //if (CurrentSelectedModel.Right >= 밴드최대사이즈)
                            //break;

                            //현재 right 좌표의 우측에 있는 x좌표를 가져온다. 
                            //컨트롤의 오른쪽 좌표 기준으로 검색을 한다. 
                            var selected1 = snapX.Where(n => n > CurrentSelectedModel.Right);
                            if (selected1.Count() > 0)
                            {
                                var point = selected1.OrderBy(x => x).First();
                                //이동거리를 추가한다. 
                                movement.Add(point - CurrentSelectedModel.Right);
                            }

                            //컨트롤의 왼쪽 좌표 기준으로 오른쪽으로 검색을 한다. 
                            var selected2 = snapX.Where(n => n > CurrentSelectedModel.X);
                            if (selected2.Count() > 0)
                            {
                                var point = selected2.OrderBy(x => x).First();
                                movement.Add(point - (int)CurrentSelectedModel.X);
                            }

                            if (movement.Count > 0)
                            {   //가장 이동이 적은 다음 스냅 포인트로 이동한다.                             
                                CurrentSelectedModel.X += movement.OrderBy(x => x).First();
                            }
                        }
                        break;
                    case "ArrowDown":
                        OnActionStart();

                        {
                            //todo
                            //if (CurrentSelectedModel.Bottom >= 밴드최대사이즈)
                            //break;
                            var selected1 = snapY.Where(n => n > CurrentSelectedModel.Bottom);
                            if (selected1.Count() > 0)
                            {
                                var point = selected1.OrderBy(x => x).First();
                                movement.Add(point - CurrentSelectedModel.Bottom);
                            }

                            //컨트롤의 왼쪽 좌표 기준으로 오른쪽으로 검색을 한다. 
                            var selected2 = snapY.Where(n => n > CurrentSelectedModel.Y);
                            if (selected2.Count() > 0)
                            {
                                var point = selected2.OrderBy(x => x).First();
                                movement.Add(point - (int)CurrentSelectedModel.Y);
                            }

                            if (movement.Count > 0)
                            {
                                CurrentSelectedModel.Y += movement.OrderBy(x => x).First();
                            }
                        }
                        break;
                    case "ArrowLeft":
                        OnActionStart();

                        {
                            if (CurrentSelectedModel.X <= 0)
                                break;

                            var selected1 = snapX.Where(n => n < CurrentSelectedModel.Right);
                            if (selected1.Count() > 0)
                            {
                                var point = selected1.OrderBy(x => x).Last();
                                movement.Add(CurrentSelectedModel.Right - point);
                            }
                            var selected2 = snapX.Where(n => n < CurrentSelectedModel.X);
                            if (selected2.Count() > 0)
                            {
                                var point = selected2.OrderBy(x => x).Last();
                                movement.Add((int)CurrentSelectedModel.X - point);
                            }
                            if (movement.Count > 0)
                            {
                                CurrentSelectedModel.X -= movement.OrderBy(x => x).First();
                            }
                        }
                        break;
                    case "ArrowUp":
                        OnActionStart();
                        {
                            if (CurrentSelectedModel.Y <= 0)
                                break;

                            var selected1 = snapY.Where(n => n < CurrentSelectedModel.Bottom);
                            if (selected1.Count() > 0)
                            {
                                var point = selected1.OrderBy(x => x).Last();
                                movement.Add(CurrentSelectedModel.Bottom - point);
                            }

                            var selected2 = snapY.Where(n => n < CurrentSelectedModel.Y);
                            if (selected2.Count() > 0)
                            {
                                var point = selected2.OrderBy(x => x).Last();
                                movement.Add((int)CurrentSelectedModel.Y - point);
                            }

                            if (movement.Count > 0)
                            {
                                CurrentSelectedModel.Y -= movement.OrderBy(x => x).First();
                            }
                        }
                        break;

                }
            }
            else
            {
                switch (e.Key)
                {
                    case "ArrowRight":
                        CurrentSelectedModel.X += 1;
                        break;
                    case "ArrowDown":
                        CurrentSelectedModel.Y += 1;
                        break;
                    case "ArrowLeft":
                        CurrentSelectedModel.X -= 1;
                        break;
                    case "ArrowUp":
                        CurrentSelectedModel.Y -= 1;
                        break;
                }
            }
        }
        if (e.CtrlKey)
        {
            switch (e.Key)
            {
                case "z":
                    Undo();
                    break;
                case "y":
                    Redo();
                    break;
            }
        }
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        OnActionEnd();

    }

    /// <summary>
    /// 현재 선택된 컨트롤이 다른 컨트롤과 겹치는 계산해서, 겹칠경우 IsOverlap 속성을 변경합니다.
    /// </summary>
    private void CheckAreaOverlap()
    {
        if (CurrentSelectedModel is null)
            return;

        int x1 = (int)CurrentSelectedModel.X;
        int x2 = (int)CurrentSelectedModel.Right;
        int y1 = (int)CurrentSelectedModel.Y;
        int y2 = CurrentSelectedModel.Bottom;

        CurrentSelectedModel.IsOverlap = false;

        foreach (_07_BaseControlModel control in Controls)
        {
            if (control.Equals(CurrentSelectedModel))
                continue;

            int cx1 = (int)control.X;
            int cx2 = (int)control.Right;
            int cy1 = (int)control.Y;
            int cy2 = (int)control.Bottom;

            if ((cx2 > x1 && cx1 < x2) && (cy2 > y1 && cy1 < y2))
            {
                control.IsOverlap = true;
                CurrentSelectedModel.IsOverlap = true;
            }
            else
                control.IsOverlap = false;
        }
    }

    private void OnActionStart()
    {
        //지금 했던 행동을 저장합니다.
        //ex) 컨트롤이동, 컨트롤 삭제 , 컨트롤 생성.
        //컨트롤 이동의 경우 현재 컨트롤의 위치 정보를 기록한다.
        _07_Manager.Instance.SaveState(true);
    }

    //모든 사용자 행위가 끝난 후에 호출됩니다.
    private void OnActionEnd()
    {
        //포인트업
        //키업
        UpdateSnapControl();
        CheckAreaOverlap();       
        if (_07_Manager.Instance.CurrentAction != ActionType.None && _07_Manager.Instance.CurrentAction != ActionType.Undo && _07_Manager.Instance.CurrentAction != ActionType.Redo)
            _07_Manager.Instance.SaveState();

        _07_Manager.Instance.CurrentAction = ActionType.None;
    }

    public void Undo()
    {
        _07_Manager.Instance.CurrentAction = ActionType.Undo;
        _07_BaseControlModel model = _07_Manager.Instance.Undo();
        if(model is not null)
        {
            CurrentSelectedModel = Controls.Find(x => x.Uid == model.Uid);

            if (CurrentSelectedModel is not null)
            {
                CurrentSelectedModel.X = (int)model.X;
                CurrentSelectedModel.Y = (int)model.Y;
            }
        }
    }

    public void Redo()
    {
        _07_Manager.Instance.CurrentAction = ActionType.Redo;
        _07_BaseControlModel model = _07_Manager.Instance.Redo();
        if (model is not null)
        {
            CurrentSelectedModel = Controls.Find(x => x.Uid == model.Uid);

            if (CurrentSelectedModel is not null)
            {
                CurrentSelectedModel.X = (int)model.X;
                CurrentSelectedModel.Y = (int)model.Y;
            }
        }
    }
}
